import os
import pandas as pd
import requests
from datetime import datetime
from utils.logger import setup_logger

logger = setup_logger("malwarebazaar_recent")

RECENT_CSV_URL = "https://bazaar.abuse.ch/export/csv/recent/"
EXPORT_DIR = "data_feeds/malwarebazaar/raw"
MASTER_FILE = "data_feeds/malwarebazaar/malwarebazaar_master.csv"

def fetch_recent_malwarebazaar():
    try:
        logger.info("Downloading recent MalwareBazaar feed...")
        response = requests.get(RECENT_CSV_URL)
        response.raise_for_status()

        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        os.makedirs(EXPORT_DIR, exist_ok=True)
        raw_file = os.path.join(EXPORT_DIR, f"malwarebazaar_recent_{timestamp}.csv")

        with open(raw_file, "wb") as f:
            f.write(response.content)

        logger.info(f"Saved recent feed as {raw_file}")
        return raw_file
    except Exception as e:
        logger.error(f"Failed to download recent.csv: {e}")
        return None

def load_recent_data(file_path):
    try:
        df = pd.read_csv(file_path, skiprows=8, on_bad_lines='skip', engine="python")
        df = df.dropna(subset=["sha256_hash"])
        df["malicious"] = 1
        df["source_file"] = os.path.basename(file_path)
        df["fetched_at"] = datetime.utcnow().isoformat()
        return df
    except Exception as e:
        logger.error(f"Error parsing recent.csv: {e}")
        return pd.DataFrame()

def update_master_dataset(new_df):
    if not os.path.exists(MASTER_FILE):
        logger.info("No existing master file. Creating a new one.")
        new_df.to_csv(MASTER_FILE, index=False)
        logger.info(f"Master created with {len(new_df)} entries.")
        return

    try:
        existing_df = pd.read_csv(MASTER_FILE)

        # Combine + deduplicate
        combined = pd.concat([existing_df, new_df], ignore_index=True)

        # Drop duplicates by sha256_hash
        combined = combined.drop_duplicates(subset=["sha256_hash"], keep="first")

        # Save the clean master file
        combined.to_csv(MASTER_FILE, index=False)
        logger.info(f"Master updated. Total records: {len(combined)}")
    except Exception as e:
        logger.error(f"Failed to merge with master: {e}")

def run_malwarebazaar_recent_ingestion():
    recent_path = fetch_recent_malwarebazaar()
    if not recent_path:
        return

    new_df = load_recent_data(recent_path)
    if new_df.empty:
        logger.warning("No new records found in recent feed.")
        return

    update_master_dataset(new_df)

if __name__ == "__main__":
    run_malwarebazaar_recent_ingestion()
